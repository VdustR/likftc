var J=Object.defineProperty,O=Object.defineProperties;var V=Object.getOwnPropertyDescriptors;var D=Object.getOwnPropertySymbols;var z=Object.prototype.hasOwnProperty,G=Object.prototype.propertyIsEnumerable;var x=(l,s,a)=>s in l?J(l,s,{enumerable:!0,configurable:!0,writable:!0,value:a}):l[s]=a,A=(l,s)=>{for(var a in s||(s={}))z.call(s,a)&&x(l,a,s[a]);if(D)for(var a of D(s))G.call(s,a)&&x(l,a,s[a]);return l},v=(l,s)=>O(l,V(s));import{a7 as t,a8 as r,a9 as b,aa as M,ab as R,S as $,i as _,s as k,a2 as K,l as m,a3 as W,g as i,M as c,d as y,w as C,k as Q,x as d,m as X,y as h,q as E,o as g,B,v as Y,t as Z,h as ss,e as P,c as I,a as N,b as U,E as S,ac as j,a4 as L}from"../chunks/vendor-074a1651.js";import{L as ns,T as as}from"../chunks/index-1dc2c057.js";import{D as ls}from"../chunks/Demo-e3950ce5.js";const ps=200,T=[[1,2,3],[2,3,4],[3,4,1],[4,1,2],[4,3,2],[2,3,4]];function H(){const[l,s]=t.exports.useState(0),a=t.exports.useMemo(()=>T[l],[l]);return t.exports.useEffect(()=>{let n;function o(){!n||(clearInterval(n),n=null)}return n=setInterval(()=>{s(p=>{const e=p+1;return e>=T.length-1&&o(),e})},ps),()=>{o()}},[]),a}function os(){const l=H();return r.createElement(b,{flipKey:l.join(",")},r.createElement("ul",null,l.map(s=>r.createElement(M,{key:s,flipId:s},r.createElement("li",null,s)))))}const es=async({hideEnteringElements:l,animateEnteringElements:s,animateExitingElements:a,animateFlippedElements:n})=>{l(),n(),a(),s()},w=new WeakMap,q=new WeakMap;function ts({exit:l}={}){const s=t.exports.useCallback(p=>{const e=q.get(p);!e||(q.delete(p),R(v(A({},l),{onUpdate:F=>{l.onUpdate(p,F)},onComplete:()=>{var F;e(),(F=l.onComplete)==null||F.call(l)}})))},[l]),a=t.exports.useCallback(p=>{w.set(p,!0)},[]),n=t.exports.useCallback(p=>{w.delete(p),s(p)},[s]),o=t.exports.useCallback((p,e,F)=>{q.set(p,F),w.get(p)||s(p)},[s]);return t.exports.useMemo(()=>({onStart:a,onComplete:n,onExit:o}),[a,n,o])}const Fs=l=>{R({onUpdate:s=>{l.style.opacity=`${s}`}})};function cs(){const l=H(),{current:{get:s,sync:a}}=t.exports.useRef(ns(l));t.exports.useEffect(()=>{a(l)},[l]);const n=t.exports.useMemo(()=>JSON.stringify(l.map(p=>({key:p,mapKey:s(p)}))),[l,s]),o=ts({exit:t.exports.useMemo(()=>({onUpdate:(p,e)=>{p.style.opacity=`${1-Number(e)}`}}),[])});return r.createElement(b,{flipKey:n,handleEnterUpdateDelete:es},r.createElement("ul",null,l.map(p=>{const e=s(p);return r.createElement(M,A({key:e,flipId:e,onAppear:Fs},o),r.createElement("li",null,p))})))}function rs(l){let s,a=`<pre class="shiki" style="background-color: #282A36"><code><span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> </span><span style="color: #FF79C6">type</span><span style="color: #F8F8F2"> { ReactNode } </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">react</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> React </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">react</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> { Flipped, Flipper } </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">react-flip-toolkit</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> useFrame </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">./useFrame</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F8F8F2">React;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF79C6">export</span><span style="color: #F8F8F2"> </span><span style="color: #FF79C6">default</span><span style="color: #F8F8F2"> </span><span style="color: #FF79C6">function</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">With</span><span style="color: #F8F8F2">()</span><span style="color: #FF79C6">:</span><span style="color: #F8F8F2"> </span><span style="color: #8BE9FD; font-style: italic">ReactNode</span><span style="color: #F8F8F2"> {</span></span>
<span class="line"><span style="color: #F8F8F2">  </span><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> frame </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">useFrame</span><span style="color: #F8F8F2">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F8F8F2">  </span><span style="color: #FF79C6">return</span><span style="color: #F8F8F2"> (</span></span>
<span class="line"><span style="color: #F8F8F2">    &lt;</span><span style="color: #8BE9FD; font-style: italic">Flipper</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">flipKey</span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2">{frame.</span><span style="color: #50FA7B">join</span><span style="color: #F8F8F2">(</span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">,</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">)}&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">      &lt;</span><span style="color: #FF79C6">ul</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">        {frame.</span><span style="color: #50FA7B">map</span><span style="color: #F8F8F2">((</span><span style="color: #FFB86C; font-style: italic">item</span><span style="color: #F8F8F2">) </span><span style="color: #FF79C6">=&gt;</span><span style="color: #F8F8F2"> (</span></span>
<span class="line"><span style="color: #F8F8F2">          &lt;</span><span style="color: #8BE9FD; font-style: italic">Flipped</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">key</span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2">{item} </span><span style="color: #50FA7B; font-style: italic">flipId</span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2">{item}&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">            &lt;</span><span style="color: #FF79C6">li</span><span style="color: #F8F8F2">&gt;{item}&lt;/</span><span style="color: #FF79C6">li</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">          &lt;/</span><span style="color: #8BE9FD; font-style: italic">Flipped</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">        ))}</span></span>
<span class="line"><span style="color: #F8F8F2">      &lt;/</span><span style="color: #FF79C6">ul</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">    &lt;/</span><span style="color: #8BE9FD; font-style: italic">Flipper</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">  );</span></span>
<span class="line"><span style="color: #F8F8F2">}</span></span>
<span class="line"></span></code></pre>`,n;return{c(){s=new K,n=m(),this.h()},l(o){s=W(o),n=m(),this.h()},h(){s.a=n},m(o,p){s.m(a,o,p),i(o,n,p)},p:c,i:c,o:c,d(o){o&&y(n),o&&s.d()}}}class ys extends ${constructor(s){super();_(this,s,null,rs,k,{})}}function is(l){let s,a=`<pre class="shiki" style="background-color: #282A36"><code><span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> Likftc </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">@likftc/core</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> {</span></span>
<span class="line"><span style="color: #F8F8F2">  handleEnterUpdateDelete,</span></span>
<span class="line"><span style="color: #F8F8F2">  useFlippedProps,</span></span>
<span class="line"><span style="color: #F8F8F2">} </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">@likftc/react-flip-toolkit</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> </span><span style="color: #FF79C6">type</span><span style="color: #F8F8F2"> { FlippedProps } </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">@likftc/react-flip-toolkit/useFlippedProps</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> React, { ReactNode, useEffect, useMemo, useRef } </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">react</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> { Flipped, Flipper, spring } </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">react-flip-toolkit</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"><span style="color: #FF79C6">import</span><span style="color: #F8F8F2"> useFrame </span><span style="color: #FF79C6">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">./useFrame</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F8F8F2">React;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">onAppear</span><span style="color: #FF79C6">:</span><span style="color: #F8F8F2"> </span><span style="color: #8BE9FD; font-style: italic">FlippedProps</span><span style="color: #F8F8F2">[</span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">onAppear</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">] </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> (</span><span style="color: #FFB86C; font-style: italic">el</span><span style="color: #F8F8F2">) </span><span style="color: #FF79C6">=&gt;</span><span style="color: #F8F8F2"> {</span></span>
<span class="line"><span style="color: #F8F8F2">  </span><span style="color: #50FA7B">spring</span><span style="color: #F8F8F2">({</span></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #50FA7B">onUpdate</span><span style="color: #FF79C6">:</span><span style="color: #F8F8F2"> (</span><span style="color: #FFB86C; font-style: italic">val</span><span style="color: #F8F8F2">) </span><span style="color: #FF79C6">=&gt;</span><span style="color: #F8F8F2"> {</span></span>
<span class="line"><span style="color: #F8F8F2">      el.style.opacity </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #F1FA8C">\`</span><span style="color: #FF79C6">\${</span><span style="color: #F8F8F2">val</span><span style="color: #FF79C6">}</span><span style="color: #F1FA8C">\`</span><span style="color: #F8F8F2">;</span></span>
<span class="line"><span style="color: #F8F8F2">    },</span></span>
<span class="line"><span style="color: #F8F8F2">  });</span></span>
<span class="line"><span style="color: #F8F8F2">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF79C6">export</span><span style="color: #F8F8F2"> </span><span style="color: #FF79C6">default</span><span style="color: #F8F8F2"> </span><span style="color: #FF79C6">function</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">With</span><span style="color: #F8F8F2">()</span><span style="color: #FF79C6">:</span><span style="color: #F8F8F2"> </span><span style="color: #8BE9FD; font-style: italic">ReactNode</span><span style="color: #F8F8F2"> {</span></span>
<span class="line"><span style="color: #F8F8F2">  </span><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> frame </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">useFrame</span><span style="color: #F8F8F2">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F8F8F2">  </span><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> {</span></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #FFB86C; font-style: italic">current</span><span style="color: #FF79C6">:</span><span style="color: #F8F8F2"> { get, sync },</span></span>
<span class="line"><span style="color: #F8F8F2">  } </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">useRef</span><span style="color: #F8F8F2">(</span><span style="color: #50FA7B">Likftc</span><span style="color: #F8F8F2">(frame));</span></span>
<span class="line"><span style="color: #F8F8F2">  </span><span style="color: #50FA7B">useEffect</span><span style="color: #F8F8F2">(() </span><span style="color: #FF79C6">=&gt;</span><span style="color: #F8F8F2"> {</span></span>
<span class="line"><span style="color: #F8F8F2">    </span><span style="color: #50FA7B">sync</span><span style="color: #F8F8F2">(frame);</span></span>
<span class="line"><span style="color: #F8F8F2">  }, [frame]);</span></span>
<span class="line"><span style="color: #F8F8F2">  </span><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> flipKey </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">useMemo</span><span style="color: #F8F8F2">(</span></span>
<span class="line"><span style="color: #F8F8F2">    () </span><span style="color: #FF79C6">=&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">      </span><span style="color: #BD93F9">JSON</span><span style="color: #F8F8F2">.</span><span style="color: #8BE9FD">stringify</span><span style="color: #F8F8F2">(</span></span>
<span class="line"><span style="color: #F8F8F2">        frame.</span><span style="color: #50FA7B">map</span><span style="color: #F8F8F2">((</span><span style="color: #FFB86C; font-style: italic">key</span><span style="color: #F8F8F2">) </span><span style="color: #FF79C6">=&gt;</span><span style="color: #F8F8F2"> ({</span></span>
<span class="line"><span style="color: #F8F8F2">          key,</span></span>
<span class="line"><span style="color: #F8F8F2">          mapKey</span><span style="color: #FF79C6">:</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">get</span><span style="color: #F8F8F2">(key),</span></span>
<span class="line"><span style="color: #F8F8F2">        }))</span></span>
<span class="line"><span style="color: #F8F8F2">      ),</span></span>
<span class="line"><span style="color: #F8F8F2">    [frame, get]</span></span>
<span class="line"><span style="color: #F8F8F2">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F8F8F2">  </span><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> flippedProps </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">useFlippedProps</span><span style="color: #F8F8F2">({</span></span>
<span class="line"><span style="color: #F8F8F2">    exit</span><span style="color: #FF79C6">:</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">useMemo</span><span style="color: #F8F8F2">&lt;</span><span style="color: #FFB86C; font-style: italic">NonNullable</span><span style="color: #F8F8F2">&lt;</span><span style="color: #FFB86C; font-style: italic">Parameters</span><span style="color: #F8F8F2">&lt;</span><span style="color: #FF79C6">typeof</span><span style="color: #F8F8F2"> useFlippedProps&gt;[</span><span style="color: #BD93F9">0</span><span style="color: #F8F8F2">][</span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">exit</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">]&gt;&gt;(</span></span>
<span class="line"><span style="color: #F8F8F2">      () </span><span style="color: #FF79C6">=&gt;</span><span style="color: #F8F8F2"> ({</span></span>
<span class="line"><span style="color: #F8F8F2">        </span><span style="color: #50FA7B">onUpdate</span><span style="color: #FF79C6">:</span><span style="color: #F8F8F2"> (</span><span style="color: #FFB86C; font-style: italic">el</span><span style="color: #F8F8F2">, </span><span style="color: #FFB86C; font-style: italic">val</span><span style="color: #F8F8F2">) </span><span style="color: #FF79C6">=&gt;</span><span style="color: #F8F8F2"> {</span></span>
<span class="line"><span style="color: #F8F8F2">          el.style.opacity </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #F1FA8C">\`</span><span style="color: #FF79C6">\${</span><span style="color: #BD93F9">1</span><span style="color: #F1FA8C"> </span><span style="color: #FF79C6">-</span><span style="color: #F1FA8C"> </span><span style="color: #8BE9FD; font-style: italic">Number</span><span style="color: #F8F8F2">(val)</span><span style="color: #FF79C6">}</span><span style="color: #F1FA8C">\`</span><span style="color: #F8F8F2">;</span></span>
<span class="line"><span style="color: #F8F8F2">        },</span></span>
<span class="line"><span style="color: #F8F8F2">      }),</span></span>
<span class="line"><span style="color: #F8F8F2">      []</span></span>
<span class="line"><span style="color: #F8F8F2">    ),</span></span>
<span class="line"><span style="color: #F8F8F2">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F8F8F2">  </span><span style="color: #FF79C6">return</span><span style="color: #F8F8F2"> (</span></span>
<span class="line"><span style="color: #F8F8F2">    &lt;</span><span style="color: #8BE9FD; font-style: italic">Flipper</span></span>
<span class="line"><span style="color: #F8F8F2">      </span><span style="color: #50FA7B; font-style: italic">flipKey</span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2">{flipKey}</span></span>
<span class="line"><span style="color: #F8F8F2">      </span><span style="color: #50FA7B; font-style: italic">handleEnterUpdateDelete</span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2">{handleEnterUpdateDelete}</span></span>
<span class="line"><span style="color: #F8F8F2">    &gt;</span></span>
<span class="line"><span style="color: #F8F8F2">      &lt;</span><span style="color: #FF79C6">ul</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">        {frame.</span><span style="color: #50FA7B">map</span><span style="color: #F8F8F2">((</span><span style="color: #FFB86C; font-style: italic">item</span><span style="color: #F8F8F2">) </span><span style="color: #FF79C6">=&gt;</span><span style="color: #F8F8F2"> {</span></span>
<span class="line"><span style="color: #F8F8F2">          </span><span style="color: #FF79C6">const</span><span style="color: #F8F8F2"> mapKey </span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B">get</span><span style="color: #F8F8F2">(item);</span></span>
<span class="line"><span style="color: #F8F8F2">          </span><span style="color: #FF79C6">return</span><span style="color: #F8F8F2"> (</span></span>
<span class="line"><span style="color: #F8F8F2">            &lt;</span><span style="color: #8BE9FD; font-style: italic">Flipped</span></span>
<span class="line"><span style="color: #F8F8F2">              </span><span style="color: #50FA7B; font-style: italic">key</span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2">{mapKey}</span></span>
<span class="line"><span style="color: #F8F8F2">              </span><span style="color: #50FA7B; font-style: italic">flipId</span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2">{mapKey}</span></span>
<span class="line"><span style="color: #F8F8F2">              </span><span style="color: #50FA7B; font-style: italic">onAppear</span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2">{onAppear}</span></span>
<span class="line"><span style="color: #F8F8F2">              {</span><span style="color: #FF79C6">...</span><span style="color: #F8F8F2">flippedProps}</span></span>
<span class="line"><span style="color: #F8F8F2">            &gt;</span></span>
<span class="line"><span style="color: #F8F8F2">              &lt;</span><span style="color: #FF79C6">li</span><span style="color: #F8F8F2">&gt;{item}&lt;/</span><span style="color: #FF79C6">li</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">            &lt;/</span><span style="color: #8BE9FD; font-style: italic">Flipped</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">          );</span></span>
<span class="line"><span style="color: #F8F8F2">        })}</span></span>
<span class="line"><span style="color: #F8F8F2">      &lt;/</span><span style="color: #FF79C6">ul</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">    &lt;/</span><span style="color: #8BE9FD; font-style: italic">Flipper</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">  );</span></span>
<span class="line"><span style="color: #F8F8F2">}</span></span>
<span class="line"></span></code></pre>`,n;return{c(){s=new K,n=m(),this.h()},l(o){s=W(o),n=m(),this.h()},h(){s.a=n},m(o,p){s.m(a,o,p),i(o,n,p)},p:c,i:c,o:c,d(o){o&&y(n),o&&s.d()}}}class us extends ${constructor(s){super();_(this,s,null,is,k,{})}}function fs(l){let s="React Demo",a;return{c(){a=Z(s)},l(n){a=ss(n,s)},m(n,o){i(n,a,o)},p:c,d(n){n&&y(a)}}}function ms(l){let s;return{c(){s=P("div"),this.h()},l(a){s=I(a,"DIV",{slot:!0}),N(s).forEach(y),this.h()},h(){U(s,"slot","with")},m(a,n){i(a,s,n),l[5](s)},p:c,d(a){a&&y(s),l[5](null)}}}function Cs(l){let s;return{c(){s=P("div"),this.h()},l(a){s=I(a,"DIV",{slot:!0}),N(s).forEach(y),this.h()},h(){U(s,"slot","without")},m(a,n){i(a,s,n),l[4](s)},p:c,d(a){a&&y(s),l[4](null)}}}function ds(l){let s,a;return s=new us({props:{slot:"code-with"}}),{c(){C(s.$$.fragment)},l(n){d(s.$$.fragment,n)},m(n,o){h(s,n,o),a=!0},p:c,i(n){a||(E(s.$$.fragment,n),a=!0)},o(n){g(s.$$.fragment,n),a=!1},d(n){B(s,n)}}}function hs(l){let s,a;return s=new ys({props:{slot:"code-without"}}),{c(){C(s.$$.fragment)},l(n){d(s.$$.fragment,n)},m(n,o){h(s,n,o),a=!0},p:c,i(n){a||(E(s.$$.fragment,n),a=!0)},o(n){g(s.$$.fragment,n),a=!1},d(n){B(s,n)}}}function Es(l){let s,a,n,o;return s=new as({props:{$$slots:{default:[fs]},$$scope:{ctx:l}}}),n=new ls({props:{$$slots:{"code-without":[hs],"code-with":[ds],without:[Cs],with:[ms]},$$scope:{ctx:l}}}),n.$on("refreshWith",l[2]),n.$on("refreshWithout",l[3]),{c(){C(s.$$.fragment),a=Q(),C(n.$$.fragment)},l(p){d(s.$$.fragment,p),a=X(p),d(n.$$.fragment,p)},m(p,e){h(s,p,e),i(p,a,e),h(n,p,e),o=!0},p(p,[e]){const F={};e&64&&(F.$$scope={dirty:e,ctx:p}),s.$set(F);const f={};e&67&&(f.$$scope={dirty:e,ctx:p}),n.$set(f)},i(p){o||(E(s.$$.fragment,p),E(n.$$.fragment,p),o=!0)},o(p){g(s.$$.fragment,p),g(n.$$.fragment,p),o=!1},d(p){B(s,p),p&&y(a),B(n,p)}}}const ks=!0;function gs(l,s,a){let n,o;async function p(){await S(),j.exports.render(t.exports.createElement(cs),n)}async function e(){await S(),j.exports.render(t.exports.createElement(os),o)}Y(()=>{p(),e()});function F(u){L[u?"unshift":"push"](()=>{o=u,a(1,o)})}function f(u){L[u?"unshift":"push"](()=>{n=u,a(0,n)})}return[n,o,p,e,F,f]}class ws extends ${constructor(s){super();_(this,s,gs,Es,k,{})}}export{ws as default,ks as prerender};
