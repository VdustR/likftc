import{S as g,i as C,s as w,a1 as q,l as u,a2 as v,g as c,O as p,d as F,w as f,k as E,x as m,m as x,y as h,q as $,o as d,B as _,v as j,t as S,h as T,e as k,c as A,a as B,b,E as D,a3 as W}from"../chunks/vendor-505c6d6f.js";import{a as H,W as I}from"../chunks/Without-86d4f356.js";import{T as L}from"../chunks/Title-84eb75de.js";import{D as V}from"../chunks/Demo-f6bafb27.js";import"../chunks/index-80948b27.js";function M(o){let s,a=`<pre class="shiki" style="background-color: #282A36"><code><span class="line"><span style="color: #F8F8F2">&lt;</span><span style="color: #FF79C6">script</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">lang</span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2">&quot;</span><span style="color: #50FA7B; font-style: italic">ts</span><span style="color: #F8F8F2">&quot;&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">  import { flip } from &quot;svelte/animate&quot;;</span></span>
<span class="line"><span style="color: #F8F8F2">  import { fade } from &quot;svelte/transition&quot;;</span></span>
<span class="line"><span style="color: #F8F8F2">  import useFrame from &quot;./useFrame&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F8F8F2">  const frame = useFrame();</span></span>
<span class="line"><span style="color: #F8F8F2">&lt;/</span><span style="color: #FF79C6">script</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F8F8F2">&lt;</span><span style="color: #FF79C6">ul</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">  {</span><span style="color: #FF79C6">#each</span><span style="color: #F8F8F2"> $frame </span><span style="color: #FF79C6">as</span><span style="color: #F8F8F2"> item (item)}</span></span>
<span class="line"><span style="color: #F8F8F2">    &lt;</span><span style="color: #FF79C6">li</span></span>
<span class="line"><span style="color: #F8F8F2">      </span><span style="color: #FF79C6">animate:</span><span style="color: #F8F8F2">flip</span><span style="color: #FF79C6">=</span><span style="color: #F1FA8C">{{</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">duration</span><span style="color: #F8F8F2">: 1000 }}</span></span>
<span class="line"><span style="color: #F8F8F2">      </span><span style="color: #FF79C6">transition:</span><span style="color: #8BE9FD; font-style: italic">fade</span><span style="color: #F8F8F2">|</span><span style="color: #8BE9FD">local</span><span style="color: #FF79C6">=</span><span style="color: #F1FA8C">{{</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">duration</span><span style="color: #F8F8F2">: 1000 }}</span></span>
<span class="line"><span style="color: #F8F8F2">    &gt;</span></span>
<span class="line"><span style="color: #F8F8F2">      {item}</span></span>
<span class="line"><span style="color: #F8F8F2">    &lt;/</span><span style="color: #FF79C6">li</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">  {</span><span style="color: #FF79C6">/each</span><span style="color: #F8F8F2">}</span></span>
<span class="line"><span style="color: #F8F8F2">&lt;/</span><span style="color: #FF79C6">ul</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"></span></code></pre>`,n;return{c(){s=new q,n=u(),this.h()},l(l){s=v(l),n=u(),this.h()},h(){s.a=n},m(l,t){s.m(a,l,t),c(l,n,t)},p,i:p,o:p,d(l){l&&F(n),l&&s.d()}}}class O extends g{constructor(s){super();C(this,s,null,M,w,{})}}function z(o){let s,a=`<pre class="shiki" style="background-color: #282A36"><code><span class="line"><span style="color: #F8F8F2">&lt;</span><span style="color: #FF79C6">script</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">lang</span><span style="color: #FF79C6">=</span><span style="color: #F8F8F2">&quot;</span><span style="color: #50FA7B; font-style: italic">ts</span><span style="color: #F8F8F2">&quot;&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">  import Likftc from &quot;@vdustr/likftc&quot;;</span></span>
<span class="line"><span style="color: #F8F8F2">  import { flip } from &quot;svelte/animate&quot;;</span></span>
<span class="line"><span style="color: #F8F8F2">  import { fade } from &quot;svelte/transition&quot;;</span></span>
<span class="line"><span style="color: #F8F8F2">  import useFrame from &quot;./useFrame&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F8F8F2">  let frame = useFrame();</span></span>
<span class="line"><span style="color: #F8F8F2">  const { get, sync } = Likftc($frame);</span></span>
<span class="line"><span style="color: #F8F8F2">  $: {</span></span>
<span class="line"><span style="color: #F8F8F2">    sync($frame);</span></span>
<span class="line"><span style="color: #F8F8F2">  }</span></span>
<span class="line"><span style="color: #F8F8F2">&lt;/</span><span style="color: #FF79C6">script</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F8F8F2">&lt;</span><span style="color: #FF79C6">ul</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">  {</span><span style="color: #FF79C6">#each</span><span style="color: #F8F8F2"> $frame </span><span style="color: #FF79C6">as</span><span style="color: #F8F8F2"> item (get(item))}</span></span>
<span class="line"><span style="color: #F8F8F2">    &lt;</span><span style="color: #FF79C6">li</span></span>
<span class="line"><span style="color: #F8F8F2">      </span><span style="color: #FF79C6">animate:</span><span style="color: #F8F8F2">flip</span><span style="color: #FF79C6">=</span><span style="color: #F1FA8C">{{</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">duration</span><span style="color: #F8F8F2">: 1000 }}</span></span>
<span class="line"><span style="color: #F8F8F2">      </span><span style="color: #FF79C6">transition:</span><span style="color: #8BE9FD; font-style: italic">fade</span><span style="color: #F8F8F2">|</span><span style="color: #8BE9FD">local</span><span style="color: #FF79C6">=</span><span style="color: #F1FA8C">{{</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">duration</span><span style="color: #F8F8F2">: 1000 }}</span></span>
<span class="line"><span style="color: #F8F8F2">    &gt;</span></span>
<span class="line"><span style="color: #F8F8F2">      {item}</span></span>
<span class="line"><span style="color: #F8F8F2">    &lt;/</span><span style="color: #FF79C6">li</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">  {</span><span style="color: #FF79C6">/each</span><span style="color: #F8F8F2">}</span></span>
<span class="line"><span style="color: #F8F8F2">&lt;/</span><span style="color: #FF79C6">ul</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"></span></code></pre>`,n;return{c(){s=new q,n=u(),this.h()},l(l){s=v(l),n=u(),this.h()},h(){s.a=n},m(l,t){s.m(a,l,t),c(l,n,t)},p,i:p,o:p,d(l){l&&F(n),l&&s.d()}}}class G extends g{constructor(s){super();C(this,s,null,z,w,{})}}function J(o){let s="Svelte Demo",a;return{c(){a=S(s)},l(n){a=T(n,s)},m(n,l){c(n,a,l)},p,d(n){n&&F(a)}}}function K(o){let s;return{c(){s=k("div"),this.h()},l(a){s=A(a,"DIV",{slot:!0}),B(s).forEach(F),this.h()},h(){b(s,"slot","with")},m(a,n){c(a,s,n),o[5](s)},p,d(a){a&&F(s),o[5](null)}}}function N(o){let s;return{c(){s=k("div"),this.h()},l(a){s=A(a,"DIV",{slot:!0}),B(s).forEach(F),this.h()},h(){b(s,"slot","without")},m(a,n){c(a,s,n),o[4](s)},p,d(a){a&&F(s),o[4](null)}}}function P(o){let s,a;return s=new G({props:{slot:"code-with"}}),{c(){f(s.$$.fragment)},l(n){m(s.$$.fragment,n)},m(n,l){h(s,n,l),a=!0},p,i(n){a||($(s.$$.fragment,n),a=!0)},o(n){d(s.$$.fragment,n),a=!1},d(n){_(s,n)}}}function Q(o){let s,a;return s=new O({props:{slot:"code-without"}}),{c(){f(s.$$.fragment)},l(n){m(s.$$.fragment,n)},m(n,l){h(s,n,l),a=!0},p,i(n){a||($(s.$$.fragment,n),a=!0)},o(n){d(s.$$.fragment,n),a=!1},d(n){_(s,n)}}}function R(o){let s,a,n,l;return s=new L({props:{$$slots:{default:[J]},$$scope:{ctx:o}}}),n=new V({props:{$$slots:{"code-without":[Q],"code-with":[P],without:[N],with:[K]},$$scope:{ctx:o}}}),n.$on("refreshWith",o[2]),n.$on("refreshWithout",o[3]),{c(){f(s.$$.fragment),a=E(),f(n.$$.fragment)},l(t){m(s.$$.fragment,t),a=x(t),m(n.$$.fragment,t)},m(t,e){h(s,t,e),c(t,a,e),h(n,t,e),l=!0},p(t,[e]){const i={};e&64&&(i.$$scope={dirty:e,ctx:t}),s.$set(i);const y={};e&67&&(y.$$scope={dirty:e,ctx:t}),n.$set(y)},i(t){l||($(s.$$.fragment,t),$(n.$$.fragment,t),l=!0)},o(t){d(s.$$.fragment,t),d(n.$$.fragment,t),l=!1},d(t){_(s,t),t&&F(a),_(n,t)}}}const as=!0;function U(o,s,a){let n,l;async function t(){await D(),new H({target:n})}async function e(){await D(),new I({target:l})}j(()=>{t(),e()});function i(r){W[r?"unshift":"push"](()=>{l=r,a(1,l)})}function y(r){W[r?"unshift":"push"](()=>{n=r,a(0,n)})}return[n,l,t,e,i,y]}class ls extends g{constructor(s){super();C(this,s,U,R,w,{})}}export{ls as default,as as prerender};
