import{ac as J,ad as C,ae as N,af as P,ag as w,ah as r,ai as k,aj as x,ak as f,al as b,am as $,an as T,ao as W,ap as D,aq as Q,S as E,i as q,s as v,_ as I,l as m,$ as L,g as y,O as p,d as F,w as A,k as R,x as _,m as X,y as B,q as h,o as g,B as d,v as Y,t as Z,h as ss,e as S,c as j,a as K,b as V,E as M,ar as H,a0 as O}from"../chunks/vendor-41529c01.js";import{L as ls}from"../chunks/index-80948b27.js";import{T as as,D as ns}from"../chunks/Demo-c3e45933.js";const ts=200,G=[[1,2,3],[2,3,4],[3,4,1],[4,1,2],[4,3,2],[2,3,4]];function U(){const o=J(0),s=C(()=>G[o.value]);let a;function l(){!a||(clearInterval(a),a=null)}return N(()=>{a=setInterval(()=>{if(o.value++,o.value>=G.length-1){l();return}},ts)}),P(l),s}var z=(o,s)=>{const a=o.__vccOpts||o;for(const[l,n]of s)a[l]=n;return a};const os=w({setup(o){const s=U();return(a,l)=>(r(),k(W,{name:"list-complete",tag:"ul"},{default:x(()=>[(r(!0),f(T,null,b($(s),n=>(r(),f("li",{key:n,class:"list-complete-item"},D(n),1))),128))]),_:1}))}});var es=z(os,[["__scopeId","data-v-2e3552a6"]]);const ps=w({setup(o){function s(e){return String(e)}let a=U();const l=C(()=>a.value.map(s)),{get:n,sync:t}=ls(l.value);return Q(l,()=>{t(l.value)}),(e,i)=>(r(),k(W,{name:"list-complete",tag:"ul"},{default:x(()=>[(r(!0),f(T,null,b($(a),c=>(r(),f("li",{key:$(n)(s(c)),class:"list-complete-item"},D(c),1))),128))]),_:1}))}});var Fs=z(ps,[["__scopeId","data-v-486d620e"]]);function cs(o){let s,a=`<pre class="shiki" style="background-color: #282A36"><code><span class="line"><span style="color: #F8F8F2">&lt;</span><span style="color: #FF79C6">script</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">lang</span><span style="color: #F8F8F2">=</span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">ts</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">setup</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #50FA7B; font-style: italic">import</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">useFrame</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">./useFrame</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #50FA7B; font-style: italic">const</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">frame</span><span style="color: #F8F8F2"> = </span><span style="color: #50FA7B; font-style: italic">useFrame</span><span style="color: #F8F8F2">();</span></span>
<span class="line"><span style="color: #F8F8F2">&lt;/</span><span style="color: #FF79C6">script</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F8F8F2">&lt;</span><span style="color: #FF79C6">template</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">  &lt;</span><span style="color: #50FA7B; font-style: italic">transition-group</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">name</span><span style="color: #F8F8F2">=</span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">list-complete</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">tag</span><span style="color: #F8F8F2">=</span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">ul</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">    &lt;</span><span style="color: #50FA7B; font-style: italic">li</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">v-for</span><span style="color: #F8F8F2">=</span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">item in frame</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2"> :</span><span style="color: #50FA7B; font-style: italic">key</span><span style="color: #F8F8F2">=</span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">item</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">class</span><span style="color: #F8F8F2">=</span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">list-complete-item</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">      {{ </span><span style="color: #50FA7B; font-style: italic">item</span><span style="color: #F8F8F2"> }}</span></span>
<span class="line"><span style="color: #F8F8F2">    &lt;/</span><span style="color: #50FA7B; font-style: italic">li</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">  &lt;/</span><span style="color: #50FA7B; font-style: italic">transition-group</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">&lt;/</span><span style="color: #FF79C6">template</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F8F8F2">&lt;</span><span style="color: #FF79C6">style</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">scoped</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">lang</span><span style="color: #F8F8F2">=</span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">css</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">src</span><span style="color: #F8F8F2">=</span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">./style.css</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">&gt;&lt;/</span><span style="color: #FF79C6">style</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"></span></code></pre>`,l;return{c(){s=new I,l=m(),this.h()},l(n){s=L(n),l=m(),this.h()},h(){s.a=l},m(n,t){s.m(a,n,t),y(n,l,t)},p,i:p,o:p,d(n){n&&F(l),n&&s.d()}}}class rs extends E{constructor(s){super();q(this,s,null,cs,v,{})}}function ys(o){let s,a=`<pre class="shiki" style="background-color: #282A36"><code><span class="line"><span style="color: #F8F8F2">&lt;</span><span style="color: #FF79C6">script</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">lang</span><span style="color: #F8F8F2">=</span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">ts</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">setup</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #50FA7B; font-style: italic">import</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">Likftc</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">@vdustr/likftc</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"><span style="color: #50FA7B; font-style: italic">import</span><span style="color: #F8F8F2"> { </span><span style="color: #50FA7B; font-style: italic">computed</span><span style="color: #F8F8F2">, </span><span style="color: #50FA7B; font-style: italic">watch</span><span style="color: #F8F8F2"> } </span><span style="color: #50FA7B; font-style: italic">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">vue</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"><span style="color: #50FA7B; font-style: italic">import</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">useFrame</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">from</span><span style="color: #F8F8F2"> </span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">./useFrame</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #50FA7B; font-style: italic">function</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">itemToKey</span><span style="color: #F8F8F2">(</span><span style="color: #50FA7B; font-style: italic">item:</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">number</span><span style="color: #F8F8F2">) {</span></span>
<span class="line"><span style="color: #F8F8F2">  </span><span style="color: #50FA7B; font-style: italic">return</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">String</span><span style="color: #F8F8F2">(</span><span style="color: #50FA7B; font-style: italic">item</span><span style="color: #F8F8F2">);</span></span>
<span class="line"><span style="color: #F8F8F2">}</span></span>
<span class="line"><span style="color: #50FA7B; font-style: italic">let</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">frame</span><span style="color: #F8F8F2"> = </span><span style="color: #50FA7B; font-style: italic">useFrame</span><span style="color: #F8F8F2">();</span></span>
<span class="line"><span style="color: #50FA7B; font-style: italic">const</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">keys</span><span style="color: #F8F8F2"> = </span><span style="color: #50FA7B; font-style: italic">computed</span><span style="color: #F8F8F2">(() =&gt; </span><span style="color: #50FA7B; font-style: italic">frame</span><span style="color: #F8F8F2">.</span><span style="color: #50FA7B; font-style: italic">value</span><span style="color: #F8F8F2">.</span><span style="color: #50FA7B; font-style: italic">map</span><span style="color: #F8F8F2">(</span><span style="color: #50FA7B; font-style: italic">itemToKey</span><span style="color: #F8F8F2">));</span></span>
<span class="line"></span>
<span class="line"><span style="color: #50FA7B; font-style: italic">const</span><span style="color: #F8F8F2"> { </span><span style="color: #50FA7B; font-style: italic">get</span><span style="color: #F8F8F2">, </span><span style="color: #50FA7B; font-style: italic">sync</span><span style="color: #F8F8F2"> } = </span><span style="color: #50FA7B; font-style: italic">Likftc</span><span style="color: #F8F8F2">(</span><span style="color: #50FA7B; font-style: italic">keys</span><span style="color: #F8F8F2">.</span><span style="color: #50FA7B; font-style: italic">value</span><span style="color: #F8F8F2">);</span></span>
<span class="line"><span style="color: #50FA7B; font-style: italic">watch</span><span style="color: #F8F8F2">(</span><span style="color: #50FA7B; font-style: italic">keys</span><span style="color: #F8F8F2">, () =&gt; {</span></span>
<span class="line"><span style="color: #F8F8F2">  </span><span style="color: #50FA7B; font-style: italic">sync</span><span style="color: #F8F8F2">(</span><span style="color: #50FA7B; font-style: italic">keys</span><span style="color: #F8F8F2">.</span><span style="color: #50FA7B; font-style: italic">value</span><span style="color: #F8F8F2">);</span></span>
<span class="line"><span style="color: #F8F8F2">});</span></span>
<span class="line"><span style="color: #F8F8F2">&lt;/</span><span style="color: #FF79C6">script</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F8F8F2">&lt;</span><span style="color: #FF79C6">template</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">  &lt;</span><span style="color: #50FA7B; font-style: italic">transition-group</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">name</span><span style="color: #F8F8F2">=</span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">list-complete</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">tag</span><span style="color: #F8F8F2">=</span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">ul</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">    &lt;</span><span style="color: #50FA7B; font-style: italic">li</span></span>
<span class="line"><span style="color: #F8F8F2">      </span><span style="color: #50FA7B; font-style: italic">v-for</span><span style="color: #F8F8F2">=</span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">item in frame</span><span style="color: #E9F284">&quot;</span></span>
<span class="line"><span style="color: #F8F8F2">      :</span><span style="color: #50FA7B; font-style: italic">key</span><span style="color: #F8F8F2">=</span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">get(itemToKey(item))</span><span style="color: #E9F284">&quot;</span></span>
<span class="line"><span style="color: #F8F8F2">      </span><span style="color: #50FA7B; font-style: italic">class</span><span style="color: #F8F8F2">=</span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">list-complete-item</span><span style="color: #E9F284">&quot;</span></span>
<span class="line"><span style="color: #F8F8F2">    &gt;</span></span>
<span class="line"><span style="color: #F8F8F2">      {{ </span><span style="color: #50FA7B; font-style: italic">item</span><span style="color: #F8F8F2"> }}</span></span>
<span class="line"><span style="color: #F8F8F2">    &lt;/</span><span style="color: #50FA7B; font-style: italic">li</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">  &lt;/</span><span style="color: #50FA7B; font-style: italic">transition-group</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"><span style="color: #F8F8F2">&lt;/</span><span style="color: #FF79C6">template</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F8F8F2">&lt;</span><span style="color: #FF79C6">style</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">scoped</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">lang</span><span style="color: #F8F8F2">=</span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">css</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2"> </span><span style="color: #50FA7B; font-style: italic">src</span><span style="color: #F8F8F2">=</span><span style="color: #E9F284">&quot;</span><span style="color: #F1FA8C">./style.css</span><span style="color: #E9F284">&quot;</span><span style="color: #F8F8F2">&gt;&lt;/</span><span style="color: #FF79C6">style</span><span style="color: #F8F8F2">&gt;</span></span>
<span class="line"></span></code></pre>`,l;return{c(){s=new I,l=m(),this.h()},l(n){s=L(n),l=m(),this.h()},h(){s.a=l},m(n,t){s.m(a,n,t),y(n,l,t)},p,i:p,o:p,d(n){n&&F(l),n&&s.d()}}}class is extends E{constructor(s){super();q(this,s,null,ys,v,{})}}function us(o){let s="Vue Demo",a;return{c(){a=Z(s)},l(l){a=ss(l,s)},m(l,n){y(l,a,n)},p,d(l){l&&F(a)}}}function fs(o){let s;return{c(){s=S("div"),this.h()},l(a){s=j(a,"DIV",{slot:!0}),K(s).forEach(F),this.h()},h(){V(s,"slot","with")},m(a,l){y(a,s,l),o[5](s)},p,d(a){a&&F(s),o[5](null)}}}function ms(o){let s;return{c(){s=S("div"),this.h()},l(a){s=j(a,"DIV",{slot:!0}),K(s).forEach(F),this.h()},h(){V(s,"slot","without")},m(a,l){y(a,s,l),o[4](s)},p,d(a){a&&F(s),o[4](null)}}}function As(o){let s,a;return s=new is({props:{slot:"code-with"}}),{c(){A(s.$$.fragment)},l(l){_(s.$$.fragment,l)},m(l,n){B(s,l,n),a=!0},p,i(l){a||(h(s.$$.fragment,l),a=!0)},o(l){g(s.$$.fragment,l),a=!1},d(l){d(s,l)}}}function _s(o){let s,a;return s=new rs({props:{slot:"code-without"}}),{c(){A(s.$$.fragment)},l(l){_(s.$$.fragment,l)},m(l,n){B(s,l,n),a=!0},p,i(l){a||(h(s.$$.fragment,l),a=!0)},o(l){g(s.$$.fragment,l),a=!1},d(l){d(s,l)}}}function Bs(o){let s,a,l,n;return s=new as({props:{$$slots:{default:[us]},$$scope:{ctx:o}}}),l=new ns({props:{$$slots:{"code-without":[_s],"code-with":[As],without:[ms],with:[fs]},$$scope:{ctx:o}}}),l.$on("refreshWith",o[2]),l.$on("refreshWithout",o[3]),{c(){A(s.$$.fragment),a=R(),A(l.$$.fragment)},l(t){_(s.$$.fragment,t),a=X(t),_(l.$$.fragment,t)},m(t,e){B(s,t,e),y(t,a,e),B(l,t,e),n=!0},p(t,[e]){const i={};e&64&&(i.$$scope={dirty:e,ctx:t}),s.$set(i);const c={};e&67&&(c.$$scope={dirty:e,ctx:t}),l.$set(c)},i(t){n||(h(s.$$.fragment,t),h(l.$$.fragment,t),n=!0)},o(t){g(s.$$.fragment,t),g(l.$$.fragment,t),n=!1},d(t){d(s,t),t&&F(a),d(l,t)}}}const Es=!0;function hs(o,s,a){let l,n;async function t(){await M(),H(Fs).mount(l)}async function e(){await M(),H(es).mount(n)}Y(()=>{t(),e()});function i(u){O[u?"unshift":"push"](()=>{n=u,a(1,n)})}function c(u){O[u?"unshift":"push"](()=>{l=u,a(0,l)})}return[l,n,t,e,i,c]}class qs extends E{constructor(s){super();q(this,s,hs,Bs,v,{})}}export{qs as default,Es as prerender};
